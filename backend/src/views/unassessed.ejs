<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <style>
      :root {
        --primary-color: #3498db;
        --secondary-color: #2c3e50;
        --success-color: #2ecc71;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --light-color: #ecf0f1;
        --dark-color: #34495e;
        --gray-color: #95a5a6;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f5f5f5;
        color: #333;
        line-height: 1.6;
      }

      .container {
        display: flex;
        min-height: 100vh;
      }

      /* Sidebar */
      .sidebar {
        width: 250px;
        background-color: var(--secondary-color);
        color: white;
        padding: 20px 0;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
      }

      .sidebar-header {
        padding: 0 20px 20px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        text-align: center;
      }

      .sidebar-header h1 {
        font-size: 1.5rem;
        margin-bottom: 5px;
      }

      .sidebar-header p {
        font-size: 0.8rem;
        opacity: 0.7;
      }

      .sidebar-menu {
        padding: 20px 0;
      }

      .menu-item {
        padding: 10px 20px;
        display: block;
        color: white;
        text-decoration: none;
        transition: background-color 0.2s;
      }

      .menu-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }

      .menu-item.active {
        background-color: var(--primary-color);
        border-left: 4px solid white;
      }

      .sidebar-footer {
        padding: 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 0.8rem;
        text-align: center;
        position: absolute;
        bottom: 0;
        width: 100%;
      }

      /* Main Content */
      .main-content {
        flex: 1;
        margin-left: 250px;
        padding: 20px;
      }

      .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #ddd;
      }

      .page-title {
        font-size: 1.8rem;
        color: var(--secondary-color);
      }

      .user-info {
        display: flex;
        align-items: center;
      }

      .user-name {
        margin-right: 10px;
      }

      .logout-btn {
        background-color: transparent;
        border: none;
        color: var(--primary-color);
        cursor: pointer;
        text-decoration: underline;
      }

      /* Tables */
      .table-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 30px;
        overflow-x: auto;
      }

      .table-header {
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .table-title {
        font-size: 1.2rem;
        color: var(--secondary-color);
      }

      .table {
        width: 100%;
        border-collapse: collapse;
      }

      .table th,
      .table td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #eee;
      }

      .table th {
        background-color: #f8f9fa;
        font-weight: 600;
        color: var(--secondary-color);
      }

      .table tbody tr:hover {
        background-color: #f8f9fa;
      }

      .badge {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
      }

      .badge-pending {
        background-color: var(--gray-color);
        color: white;
      }

      .badge-processing {
        background-color: var(--primary-color);
        color: white;
      }

      .badge-completed {
        background-color: var(--success-color);
        color: white;
      }

      .badge-failed {
        background-color: var(--danger-color);
        color: white;
      }

      .badge-not-found {
        background-color: var(--warning-color);
        color: white;
      }

      /* Buttons */
      .btn {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
        transition: background-color 0.2s;
        border: none;
      }

      .btn-primary {
        background-color: var(--primary-color);
        color: white;
      }

      .btn-primary:hover {
        background-color: #2980b9;
      }

      .btn-secondary {
        background-color: var(--light-color);
        color: var(--dark-color);
      }

      .btn-secondary:hover {
        background-color: #bdc3c7;
      }

      .btn-success {
        background-color: var(--success-color);
        color: white;
      }

      .btn-success:hover {
        background-color: #27ae60;
      }

      .btn-danger {
        background-color: var(--danger-color);
        color: white;
      }

      .btn-danger:hover {
        background-color: #c0392b;
      }

      .btn-sm {
        padding: 4px 8px;
        font-size: 0.8rem;
      }

      /* Filters */
      .filters {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
      }

      .filter-group {
        display: flex;
        align-items: center;
      }

      .filter-label {
        margin-right: 5px;
        font-size: 0.9rem;
        color: var(--secondary-color);
      }

      .filter-select {
        padding: 5px 10px;
        border-radius: 4px;
        border: 1px solid #ddd;
        background-color: white;
      }

      /* Pagination */
      .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
      }

      .pagination-item {
        display: inline-block;
        padding: 5px 10px;
        margin: 0 5px;
        border-radius: 4px;
        background-color: white;
        border: 1px solid #ddd;
        color: var(--secondary-color);
        text-decoration: none;
      }

      .pagination-item.active {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
      }

      .pagination-item:hover:not(.active) {
        background-color: #f5f5f5;
      }

      /* Action buttons */
      .action-buttons {
        display: flex;
        gap: 5px;
      }

      /* Modal */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
      }

      .modal-content {
        background-color: white;
        margin: 10% auto;
        padding: 20px;
        border-radius: 8px;
        width: 50%;
        max-width: 500px;
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
      }

      .modal-title {
        font-size: 1.2rem;
        color: var(--secondary-color);
      }

      .close {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }

      .close:hover {
        color: black;
      }

      .modal-body {
        margin-bottom: 15px;
      }

      .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
      }

      /* Responsive */
      @media (max-width: 768px) {
        .container {
          flex-direction: column;
        }

        .sidebar {
          width: 100%;
          height: auto;
          position: relative;
        }

        .sidebar-footer {
          position: relative;
        }

        .main-content {
          margin-left: 0;
        }

        .filters {
          flex-direction: column;
        }

        .modal-content {
          width: 90%;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!-- Sidebar -->
      <div class="sidebar">
        <div class="sidebar-header">
          <h1>PrivacyGuard</h1>
          <p>Admin Dashboard</p>
        </div>

        <div class="sidebar-menu">
          <a href="/admin" class="menu-item">Dashboard</a>
          <a href="/admin/assessments" class="menu-item">Assessments</a>
          <a href="/admin/unassessed" class="menu-item active">Unassessed URLs</a>
          <a href="/admin/analytics" class="menu-item">Analytics</a>
          <a href="/admin/users" class="menu-item">Users</a>
          <a href="/admin/audit-logs" class="menu-item">Audit Logs</a>
        </div>

        <div class="sidebar-footer">
          &copy; <%= new Date().getFullYear() %> PrivacyGuard
        </div>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <div class="page-header">
          <h1 class="page-title">Unassessed URLs</h1>

          <div class="user-info">
            <span class="user-name">Welcome, <%= user.name %></span>
            <a href="/admin/logout" class="logout-btn">Logout</a>
          </div>
        </div>

        <!-- Filters -->
        <div class="filters">
          <div class="filter-group">
            <label class="filter-label">Status:</label>
            <select id="status-filter" class="filter-select">
              <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All</option>
              <option value="Pending" <%= filters.status === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Processing" <%= filters.status === 'Processing' ? 'selected' : '' %>>Processing</option>
              <option value="Completed" <%= filters.status === 'Completed' ? 'selected' : '' %>>Completed</option>
              <option value="Failed" <%= filters.status === 'Failed' ? 'selected' : '' %>>Failed</option>
              <option value="Not Found" <%= filters.status === 'Not Found' ? 'selected' : '' %>>Not Found</option>
            </select>
          </div>

          <div class="filter-group">
            <label class="filter-label">Sort By:</label>
            <select id="sort-filter" class="filter-select">
              <option value="first_recorded" <%= filters.sort === 'first_recorded' ? 'selected' : '' %>>Date Added</option>
              <option value="url" <%= filters.sort === 'url' ? 'selected' : '' %>>URL</option>
              <option value="status" <%= filters.sort === 'status' ? 'selected' : '' %>>Status</option>
            </select>
          </div>

          <div class="filter-group">
            <label class="filter-label">Order:</label>
            <select id="order-filter" class="filter-select">
              <option value="desc" <%= filters.order === 'desc' ? 'selected' : '' %>>Descending</option>
              <option value="asc" <%= filters.order === 'asc' ? 'selected' : '' %>>Ascending</option>
            </select>
          </div>

          <button id="apply-filters" class="btn btn-primary btn-sm">Apply Filters</button>
        </div>

        <!-- Unassessed URLs Table -->
        <div class="table-container">
          <div class="table-header">
            <h2 class="table-title">Unassessed URLs</h2>
            <div>
              <button id="process-all-btn" class="btn btn-success">Process All</button>
            </div>
          </div>

          <table class="table">
            <thead>
              <tr>
                <th>URL</th>
                <th>Date Added</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (unassessedUrls && unassessedUrls.length > 0) { %> 
                <% unassessedUrls.forEach(url => { %>
                <tr>
                  <td><%= url.url %></td>
                  <td><%= new Date(url.first_recorded).toLocaleString() %></td>
                  <td>
                    <span class="badge badge-<%= url.status.toLowerCase().replace(' ', '-') %>">
                      <%= url.status %>
                    </span>
                  </td>
                  <td class="action-buttons">
                    <button 
                      class="btn btn-primary btn-sm process-btn" 
                      data-url="<%= encodeURIComponent(url.url) %>"
                      <%= url.status === 'Processing' ? 'disabled' : '' %>
                    >
                      Process
                    </button>
                    <button 
                      class="btn btn-secondary btn-sm suggest-btn" 
                      data-url="<%= encodeURIComponent(url.url) %>"
                      data-suggested-urls="<%= JSON.stringify(url.suggested_policy_urls || []) %>"
                    >
                      Suggest URLs
                    </button>
                    <button 
                      class="btn btn-danger btn-sm delete-btn" 
                      data-url="<%= encodeURIComponent(url.url) %>"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
                <% }); %> 
              <% } else { %>
                <tr>
                  <td colspan="4" style="text-align: center">
                    No unassessed URLs found
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>

          <!-- Pagination -->
          <% if (pagination.totalPages > 1) { %>
            <div class="pagination">
              <% if (pagination.page > 1) { %>
                <a href="?page=<%= pagination.page - 1 %>&status=<%= filters.status %>&sort=<%= filters.sort %>&order=<%= filters.order %>" class="pagination-item">&laquo;</a>
              <% } %>

              <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                <a 
                  href="?page=<%= i %>&status=<%= filters.status %>&sort=<%= filters.sort %>&order=<%= filters.order %>" 
                  class="pagination-item <%= pagination.page === i ? 'active' : '' %>"
                >
                  <%= i %>
                </a>
              <% } %>

              <% if (pagination.page < pagination.totalPages) { %>
                <a href="?page=<%= pagination.page + 1 %>&status=<%= filters.status %>&sort=<%= filters.sort %>&order=<%= filters.order %>" class="pagination-item">&raquo;</a>
              <% } %>
            </div>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Process Confirmation Modal -->
    <div id="process-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Process URL</h2>
          <span class="close">&times;</span>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to process this URL?</p>
          <p id="process-url"></p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" id="cancel-process">Cancel</button>
          <button class="btn btn-primary" id="confirm-process">Process</button>
        </div>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="delete-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Delete URL</h2>
          <span class="close">&times;</span>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this URL from the unassessed queue?</p>
          <p id="delete-url"></p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" id="cancel-delete">Cancel</button>
          <button class="btn btn-danger" id="confirm-delete">Delete</button>
        </div>
      </div>
    </div>

    <!-- Process All Confirmation Modal -->
    <div id="process-all-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Process All URLs</h2>
          <span class="close">&times;</span>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to process all unassessed URLs?</p>
          <p>This will trigger the assessment process for all pending URLs in the queue.</p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" id="cancel-process-all">Cancel</button>
          <button class="btn btn-success" id="confirm-process-all">Process All</button>
        </div>
      </div>
    </div>

    <!-- Suggest Policy URLs Modal -->
    <div id="suggest-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 class="modal-title">Suggest Policy URLs</h2>
          <span class="close">&times;</span>
        </div>
        <div class="modal-body">
          <p>Suggest one or more URLs where the privacy policy can be found:</p>
          <p id="suggest-url"></p>
          <div id="policy-urls-container">
            <div class="policy-url-input" style="margin-bottom: 10px; display: flex; gap: 5px;">
              <input type="text" class="policy-url" style="flex: 1; padding: 8px; border-radius: 4px; border: 1px solid #ddd;" placeholder="https://example.com/privacy-policy">
              <button type="button" class="btn btn-sm btn-primary add-policy-url">+</button>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" id="cancel-suggest">Cancel</button>
          <button class="btn btn-primary" id="confirm-suggest">Save</button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Filter form submission
        document.getElementById('apply-filters').addEventListener('click', function() {
          const status = document.getElementById('status-filter').value;
          const sort = document.getElementById('sort-filter').value;
          const order = document.getElementById('order-filter').value;
          
          window.location.href = `/admin/unassessed?status=${status}&sort=${sort}&order=${order}`;
        });

        // Process URL
        const processModal = document.getElementById('process-modal');
        const processUrl = document.getElementById('process-url');
        let currentUrl = '';

        document.querySelectorAll('.process-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            currentUrl = this.getAttribute('data-url');
            processUrl.textContent = decodeURIComponent(currentUrl);
            processModal.style.display = 'block';
          });
        });

        document.getElementById('cancel-process').addEventListener('click', function() {
          processModal.style.display = 'none';
        });

        document.getElementById('confirm-process').addEventListener('click', function() {
          fetch(`/admin/unassessed/${currentUrl}/process`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.status === 'success') {
              window.location.reload();
            } else {
              alert('Error: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while processing the URL');
          });

          processModal.style.display = 'none';
        });

        // Delete URL
        const deleteModal = document.getElementById('delete-modal');
        const deleteUrl = document.getElementById('delete-url');

        document.querySelectorAll('.delete-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            currentUrl = this.getAttribute('data-url');
            deleteUrl.textContent = decodeURIComponent(currentUrl);
            deleteModal.style.display = 'block';
          });
        });

        document.getElementById('cancel-delete').addEventListener('click', function() {
          deleteModal.style.display = 'none';
        });

        document.getElementById('confirm-delete').addEventListener('click', function() {
          fetch(`/admin/unassessed/${currentUrl}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.status === 'success') {
              window.location.reload();
            } else {
              alert('Error: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the URL');
          });

          deleteModal.style.display = 'none';
        });

        // Process All URLs
        const processAllModal = document.getElementById('process-all-modal');
        
        document.getElementById('process-all-btn').addEventListener('click', function() {
          processAllModal.style.display = 'block';
        });

        document.getElementById('cancel-process-all').addEventListener('click', function() {
          processAllModal.style.display = 'none';
        });

        document.getElementById('confirm-process-all').addEventListener('click', function() {
          fetch('/admin/trigger-assessments', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.status === 'success') {
              alert('Assessment process triggered for all unassessed URLs');
              window.location.reload();
            } else {
              alert('Error: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while triggering the assessment process');
          });

          processAllModal.style.display = 'none';
        });

        // Suggest Policy URLs
        const suggestModal = document.getElementById('suggest-modal');
        const suggestUrl = document.getElementById('suggest-url');
        const policyUrlsContainer = document.getElementById('policy-urls-container');
        let suggestedPolicyUrls = [];

        // Add policy URL input
        function addPolicyUrlInput(value = '') {
          const inputContainer = document.createElement('div');
          inputContainer.className = 'policy-url-input';
          inputContainer.style.marginBottom = '10px';
          inputContainer.style.display = 'flex';
          inputContainer.style.gap = '5px';

          const input = document.createElement('input');
          input.type = 'text';
          input.className = 'policy-url';
          input.style.flex = '1';
          input.style.padding = '8px';
          input.style.borderRadius = '4px';
          input.style.border = '1px solid #ddd';
          input.placeholder = 'https://example.com/privacy-policy';
          input.value = value;

          const addButton = document.createElement('button');
          addButton.type = 'button';
          addButton.className = 'btn btn-sm btn-primary add-policy-url';
          addButton.textContent = '+';
          addButton.addEventListener('click', function() {
            addPolicyUrlInput();
          });

          const removeButton = document.createElement('button');
          removeButton.type = 'button';
          removeButton.className = 'btn btn-sm btn-danger remove-policy-url';
          removeButton.textContent = '-';
          removeButton.addEventListener('click', function() {
            inputContainer.remove();
          });

          inputContainer.appendChild(input);
          inputContainer.appendChild(addButton);
          inputContainer.appendChild(removeButton);
          policyUrlsContainer.appendChild(inputContainer);
        }

        // Open suggest modal
        document.querySelectorAll('.suggest-btn').forEach(btn => {
          btn.addEventListener('click', function() {
            currentUrl = this.getAttribute('data-url');
            suggestUrl.textContent = decodeURIComponent(currentUrl);
            
            // Clear existing inputs
            policyUrlsContainer.innerHTML = '';
            
            // Get suggested URLs from data attribute
            try {
              suggestedPolicyUrls = JSON.parse(this.getAttribute('data-suggested-urls') || '[]');
            } catch (e) {
              suggestedPolicyUrls = [];
            }
            
            // Add inputs for existing suggested URLs
            if (suggestedPolicyUrls.length > 0) {
              suggestedPolicyUrls.forEach(url => {
                addPolicyUrlInput(url);
              });
            } else {
              // Add one empty input if no suggested URLs
              addPolicyUrlInput();
            }
            
            suggestModal.style.display = 'block';
          });
        });

        // Add policy URL button
        document.addEventListener('click', function(event) {
          if (event.target.classList.contains('add-policy-url')) {
            addPolicyUrlInput();
          }
        });

        // Cancel suggest
        document.getElementById('cancel-suggest').addEventListener('click', function() {
          suggestModal.style.display = 'none';
        });

        // Confirm suggest
        document.getElementById('confirm-suggest').addEventListener('click', function() {
          // Collect all policy URLs
          const policyUrls = Array.from(document.querySelectorAll('.policy-url'))
            .map(input => input.value.trim())
            .filter(url => url !== '');
          
          // Send to server
          fetch(`/api/unassessed/${currentUrl}/policy-urls`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ policyUrls })
          })
          .then(response => response.json())
          .then(data => {
            if (data.status === 'success') {
              alert('Policy URLs saved successfully');
              window.location.reload();
            } else {
              alert('Error: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while saving policy URLs');
          });

          suggestModal.style.display = 'none';
        });

        // Close modals when clicking on X or outside
        document.querySelectorAll('.close').forEach(closeBtn => {
          closeBtn.addEventListener('click', function() {
            document.querySelectorAll('.modal').forEach(modal => {
              modal.style.display = 'none';
            });
          });
        });

        window.addEventListener('click', function(event) {
          document.querySelectorAll('.modal').forEach(modal => {
            if (event.target === modal) {
              modal.style.display = 'none';
            }
          });
        });
      });
    </script>
  </body>
</html>
